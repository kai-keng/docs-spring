(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{445:function(t,a,s){"use strict";s.r(a);var r=s(42),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"结构型-适配器模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构型-适配器模式"}},[t._v("#")]),t._v(" 结构型-适配器模式")]),t._v(" "),s("h2",{attrs:{id:"定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),s("p",[t._v("适配器模式就是当在数据需求方与数据提供方不能互相匹配，但是我们代码都需要遵守开闭原则，轻耦合，这个时候我们需要在两端的中间添加一个适配器，用来适配两端的接口，适配器模式应运而生，在现实生活中也是非常常见，比如接口转接器等。")]),t._v(" "),s("h2",{attrs:{id:"优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),s("p",[t._v("符合开闭原则，两端接口没有直接的耦合关系，由中间适配器来衔接，最大化减少原有代码改动。")]),t._v(" "),s("h2",{attrs:{id:"实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")])])}),[],!1,null,null,null);a.default=e.exports}}]);