(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{457:function(s,t,a){"use strict";a.r(t);var n=a(42),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"sql-优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-优化"}},[s._v("#")]),s._v(" SQL 优化")]),s._v(" "),a("h2",{attrs:{id:"分页场景优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分页场景优化"}},[s._v("#")]),s._v(" 分页场景优化")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("延迟关联相关表：我们查询数据时往往可能需要 JOIN 一些关联信息表，但是 JOIN 行为会影响我们的查询效率，特别是在数据量大的分页场景下会非常的明显。如果没有必要的条件过滤与排序限制，我们可以在数据查询出来以后再对少量的数据进行关联查询，这样会快许多。")])]),s._v(" "),a("li",[a("p",[s._v("子查询：我们可以利用内部子查询，先查询出主键id，然后再查询对应 id 的详细数据，加快查询效率。")]),s._v(" "),a("div",{staticClass:"language-SQL extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("  \n  字段  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v("  \n  table_name  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v("  a  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RIGHT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("  \n  id  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v("  \n  table_name  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v("  \n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v("  b  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v("  \n  a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])])]),s._v(" "),a("h2",{attrs:{id:"批量插入使用简洁写法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#批量插入使用简洁写法"}},[s._v("#")]),s._v(" 批量插入使用简洁写法")]),s._v(" "),a("div",{staticClass:"language-SQL extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 反例")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("into")]),s._v(" person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'A'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("into")]),s._v(" person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'B'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("into")]),s._v(" person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'C'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 正例")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("into")]),s._v(" person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'A'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'B'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'C'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"模糊查询优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模糊查询优化"}},[s._v("#")]),s._v(" 模糊查询优化")]),s._v(" "),a("p",[s._v("日常业务开发经常会使用到模糊查询，通常会使用 "),a("code",[s._v("%关键词%")]),s._v(" 的方式查询，这种查询方式无法应用上索引，依据最左匹配原则，我们需要尽量使用右模糊 "),a("code",[s._v("关键词%")]),s._v(" ，右模糊可以应用上索引，加快查询效率。若有更复杂的需求，则使用搜索引擎解决。")]),s._v(" "),a("h2",{attrs:{id:"避免在-where-语句中进行函数转换或表达式计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#避免在-where-语句中进行函数转换或表达式计算"}},[s._v("#")]),s._v(" 避免在 WHERE 语句中进行函数转换或表达式计算")]),s._v(" "),a("p",[s._v("在表达式中进行计算无法使用上索引而且因为需要计算，查询效率会非常低，所以禁止在语句中计算，需要在业务中事先计算好，可以使用动态SQL。")]),s._v(" "),a("h2",{attrs:{id:"使用-isnull-做-null-值判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-isnull-做-null-值判断"}},[s._v("#")]),s._v(" 使用 ISNULL 做 NULL 值判断")]),s._v(" "),a("p",[s._v("在 MySQL 中 NULL 与任何值比较返回值都为 NULL 而不是 false 或 true。必须使用 ISNULL 对 NULL 进行判断。")]),s._v(" "),a("div",{staticClass:"language-SQL extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" 的返回结果是 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("，而不是 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("。 \n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" 的返回结果是 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("，而不是 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("。 \n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 的返回结果是 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("，而不是 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("。\n")])])]),a("h2",{attrs:{id:"尽量不使用多表查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#尽量不使用多表查询"}},[s._v("#")]),s._v(" 尽量不使用多表查询")]),s._v(" "),a("p",[s._v("业务开发中尽量查询单表不使用表连接，必须使用的话不要超过3张表，且表连接的字段必须类型一致并建立索引。")]),s._v(" "),a("h2",{attrs:{id:"使用-count-不要使用-count-列名-与-count-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-count-不要使用-count-列名-与-count-1"}},[s._v("#")]),s._v(" 使用 COUNT(*) 不要使用 COUNT(列名) 与 COUNT(1)")]),s._v(" "),a("p",[s._v("我们在统计行数的时候直接使用 "),a("code",[s._v("COUNT(*)")]),s._v("，"),a("code",[s._v("COUNT(*)")]),s._v(" 与 "),a("code",[s._v("COUNT(1)")]),s._v(" 实际上没有区别，但是 "),a("code",[s._v("COUNT(*)")]),s._v(" 是 SQL92 定义的标准统计行数的语法。"),a("code",[s._v("COUNT(*)")]),s._v(" 与 "),a("code",[s._v("COUNT(1)")]),s._v(" 在不使用 GROUP BY 与 WHERE 的时候，MySQL 都对其做了一些查询优化，但是 "),a("code",[s._v("COUNT(列名)")]),s._v(" 没有优化，且需要对字段的非 NULL 做判断，效率会更低。")]),s._v(" "),a("h2",{attrs:{id:"避免字段类型不同导致索引失效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#避免字段类型不同导致索引失效"}},[s._v("#")]),s._v(" 避免字段类型不同导致索引失效")]),s._v(" "),a("p",[s._v("我们在查询的时候若保存的 VARCHAR 类型，但是用于与 INT 类型比较的时候，会隐式的将 VARCHER 转换为 INT 类型，导致索引失效。所以我们要保持字段的类型一致，使用同类型值进行查询，避免发生隐式转化让索引失效。")])])}),[],!1,null,null,null);t.default=e.exports}}]);