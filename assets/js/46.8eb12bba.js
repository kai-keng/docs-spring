(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{463:function(t,a,e){"use strict";e.r(a);var r=e(42),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"行为型-观察者模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#行为型-观察者模式"}},[t._v("#")]),t._v(" 行为型-观察者模式")]),t._v(" "),e("h2",{attrs:{id:"定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),e("p",[t._v("观察者模式就是存在一个主题，可以有很多的观察者订阅这个主题，如果这个主题有消息变动，则会主动提醒这个主题的订阅者。")]),t._v(" "),e("h2",{attrs:{id:"应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),e("ul",[e("li",[t._v("消息队列就是一个典型的观察者模式，消息队列中可以创建主题，用户可以针对主题进行订阅，如果订阅了指定的主题，当队列中有消息推送进来的时候，会主动向所有的订阅者推送消息")]),t._v(" "),e("li",[t._v("微信订阅号也是一个观察者模式的实现")])]),t._v(" "),e("h2",{attrs:{id:"java实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java实现"}},[t._v("#")]),t._v(" Java实现")]),t._v(" "),e("ul",[e("li",[t._v("Java中内置了"),e("code",[t._v("Observable")]),t._v("类，我们可以快速的继承这个类来创建主题，而观察者可以实现"),e("code",[t._v("Observer")]),t._v("接口来接受消息的推送")]),t._v(" "),e("li",[t._v("目前"),e("code",[t._v("Observable")]),t._v("与"),e("code",[t._v("Observer")]),t._v("因为序列化和多线程安全的问题在Java9以后已经弃用，可以用PropertyChangeSupport代替实现"),e("a",{attrs:{href:"https://majing.io/posts/10000001281162",target:"_blank",rel:"noopener noreferrer"}},[t._v("(详见)"),e("OutboundLink")],1)])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/lmj623565791/article/details/24179699",target:"_blank",rel:"noopener noreferrer"}},[t._v("(参见)"),e("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=s.exports}}]);