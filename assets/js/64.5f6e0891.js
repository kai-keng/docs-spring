(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{497:function(_,v,t){"use strict";t.r(v);var a=t(42),r=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"事务（transaction）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务（transaction）"}},[_._v("#")]),_._v(" 事务（Transaction）")]),_._v(" "),t("h2",{attrs:{id:"什么是事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是事务"}},[_._v("#")]),_._v(" 什么是事务")]),_._v(" "),t("p",[_._v("事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。")]),_._v(" "),t("h2",{attrs:{id:"四大特性（acid）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四大特性（acid）"}},[_._v("#")]),_._v(" 四大特性（ACID）")]),_._v(" "),t("ul",[t("li",[_._v("原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用。")]),_._v(" "),t("li",[_._v("一致性：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的。")]),_._v(" "),t("li",[_._v("隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的。")]),_._v(" "),t("li",[_._v("持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。")])]),_._v(" "),t("h2",{attrs:{id:"脏读、不可重复读、幻读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#脏读、不可重复读、幻读"}},[_._v("#")]),_._v(" 脏读、不可重复读、幻读")]),_._v(" "),t("ul",[t("li",[_._v("脏读：(Drity Read)：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的。")]),_._v(" "),t("li",[_._v("不可重复读(Non-repeatable read):在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新了原有的数据。")]),_._v(" "),t("li",[_._v("幻读(Phantom Read):在一个事务的两次查询中数据列数不一致，例如有一个事务查询了几列(Row)数据，而另一个事务却在此时插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。")])]),_._v(" "),t("h2",{attrs:{id:"事务隔离级别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务隔离级别"}},[_._v("#")]),_._v(" 事务隔离级别")]),_._v(" "),t("p",[_._v("为了达到事务的四大特性，数据库定义了4种不同的事务隔离级别，这四个级别可以逐个解决脏读、不可重复读、幻读这几类问题。")]),_._v(" "),t("ul",[t("li",[_._v("READ-UNCOMMITTED(读未提交)： 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。")]),_._v(" "),t("li",[_._v("READ-COMMITTED(读已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。")]),_._v(" "),t("li",[_._v("REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。")]),_._v(" "),t("li",[_._v("SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。")])]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("隔离级别")]),_._v(" "),t("th",[_._v("脏读")]),_._v(" "),t("th",[_._v("不可重复读")]),_._v(" "),t("th",[_._v("幻影读")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("READ-UNCOMMITTED")]),_._v(" "),t("td",[_._v("✅")]),_._v(" "),t("td",[_._v("✅")]),_._v(" "),t("td",[_._v("✅")])]),_._v(" "),t("tr",[t("td",[_._v("READ-COMMITTED")]),_._v(" "),t("td",[_._v("❎")]),_._v(" "),t("td",[_._v("✅")]),_._v(" "),t("td",[_._v("✅")])]),_._v(" "),t("tr",[t("td",[_._v("REPEATABLE-READ")]),_._v(" "),t("td",[_._v("❎")]),_._v(" "),t("td",[_._v("❎")]),_._v(" "),t("td",[_._v("✅")])]),_._v(" "),t("tr",[t("td",[_._v("SERIALIZABLE")]),_._v(" "),t("td",[_._v("❎")]),_._v(" "),t("td",[_._v("❎")]),_._v(" "),t("td",[_._v("❎")])])])]),_._v(" "),t("p",[_._v("注意：\nMysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别")]),_._v(" "),t("p",[_._v("事务隔离机制的实现基于锁机制和并发调度。其中并发调度使用的是MVVC（多版本并发控制），通过保存修改的旧版本信息来支持并发一致性读和回滚等特性。")]),_._v(" "),t("p",[_._v("因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是READ-COMMITTED(读取提交内容):，但是你要知道的是InnoDB 存储引擎默认使用 "),t("strong",[_._v("REPEATABLE-READ")]),_._v("并不会有任何性能损失。")]),_._v(" "),t("p",[_._v("InnoDB 存储引擎在 分布式事务 的情况下一般会用到"),t("strong",[_._v("SERIALIZABLE")]),_._v("隔离级别。")])])}),[],!1,null,null,null);v.default=r.exports}}]);